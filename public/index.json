[
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab2/module1/",
	"title": "IoT device 기본 구성 (콘솔)",
	"tags": [],
	"description": "",
	"content": " AWS IoT에 연결된 디바이스는 AWS IoT 레지스트리 내에 사물(thing)로 표현됩니다. 사물은 특정 디바이스 또는 논리적 엔터티를 나타냅니다. 사물은 물리적 디바이스 또는 센서일 수 있습니다(예: 전구 또는 벽면 스위치). 또한 사물은 애플리케이션의 인스턴스와 같은 논리적 엔터티(워크샵에서는 GGAD 인스턴스) 또는 직접 AWS IoT에 연결하지는 않지만 여기에 연결하는 다른 디바이스와 관련이 있는 물리적 엔터티(예: 엔진 센서 또는 제어 패널이 장착된 차량)일 수도 있습니다.    우선 AWS IoT 콘솔로 이동합니다.\n  AWS IoT 콘솔의 온보딩 메뉴로 이동합니다.    온보딩은 AWS IoT 디바이스 SDK용 연결 마법사를 사용하여 디바이스 또는 컴퓨터를 AWS IoT에 연결할 수 있는 방법입니다.   디바이스 온보딩을 클릭합니다.   다음 화면에서 시작하기를 클릭하여 진행합니다.   현재 이 워크샵에서는 ubuntu 18.04 TLS 기반의 EC2 인스턴스를 GGAD용으로 사용합니다. 따라서 플랫폼은 Linux/OSX를 선택하고, SDK언어는 Python을 선택합니다.   사물 이름은 \u0026ldquo;SFworkshop_thing\u0026ldquo;으로 지정하고 다음 단계를 클릭하여 진행합니다.   사물의 이름이 달라지면 추후 코드 동작에 문제가 있을 수 있습니다.\n\r 과정이 완료되면 레지스트리에 사물과 그에 연결된 정책이 생성될 예정입니다. 사물 디바이스에 관련 설정을 하기 위한 연결 키트를 다운로드하고 잘 완료가되었는지 확인합니다.   이 단계는 모듈 2.2에서 수행할 예정이므로 우선 완료를 클릭하여 구성을 완료합니다.   다음과 같이 AWS IoT 콘솔 \u0026gt; 관리 \u0026gt; 사물에서 \u0026ldquo;SFworkshop_thing\u0026ldquo;이 등록된 것을 확인하실 수 있습니다.   원활한 워크샵 진행을 위해 사물의 정책을 수정하겠습니다. \u0026ldquo;SFworkshop_thing\u0026ldquo;을 클릭하여 보안 메뉴로 이동하여 앞서 자동으로 생성되었던 인증서를 선택합니다.   메뉴 탭에서 정책 를 클릭하고 마찬가지로 앞서 자동으로 생성되었던 정책을 선택합니다.\n  정책 문서 편집을 클릭합니다.   기존의 정책을 삭제하고 다음과 같이 수정하고 \u0026ldquo;새 버전으로 저장하기\u0026ldquo;를 클릭하여 저장합니다.\n  {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;iot:*\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: \u0026quot;*\u0026quot;\r}\r]\r}\r최종적인 모습은 다음과 같습니다.   실제 운영환경에서는 최소권한 원칙을 준수하여 필요한 권한만을 부여하는 정책을 적용하는 것이 좋습니다.\n\r © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab3/module1/",
	"title": "IoT 보안 터널링",
	"tags": [],
	"description": "",
	"content": "AWS IoT 보안 터널링 원격 사이트의 제한된 방화벽 뒤에 디바이스를 배포하는 경우 문제에 대한 트러블슈팅, 구성 업데이트 및 기타 운영 작업을 위해 해당 디바이스에 액세스할 수 있는 방법으로, AWS IoT에서 관리하는 보안 연결을 통해 원격 디바이스에 양방향 통신을 설정할 수 있습니다. 기존 인바운드 방화벽 규칙을 업데이트할 필요가 없으므로 원격 사이트의 방화벽 규칙에서 제공하는 보안 수준을 동일하게 유지할 수 있습니다.\n워크샵에서는 소스 및 대상지가 모두 VPC (SFworkshop VPC, default VPC)로 시뮬레이션 되었다는 것을 기억하십시오. 워크샵 특성상 모두 AWS상에서 구성이 되지만 실제로는 동일하게 on-premise와 PC상에서 보안 터널을 구성할 수 있습니다.\n\rKey Msg : AWS IoT 서비스에서 발급받은 token + source 의 local proxy + destination 의 local proxy 이 3가지의 조합으로 다른 프라이빗 네트워크 대역 간 remote 통신이 가능하고, 이에 따른 방화벽 오픈이 불필요하며 암호화 통신 등의 보안상 장점을 누릴 수 있습니다.\n보안 터널링 구성 요소  Destination : 디바이스 액세스하려는 원격 디바이스 Destination Application : 대상 디바이스에서 실행되는 애플리케이션 Ex) SSH demon Source : 디바이스운영자가 대상 디바이스(일반적으로 랩톱 또는 데스크톱 컴퓨터)에 대한 세션을 시작하는 데 사용하는 디바이스 Tunnel : 소스 디바이스와 대상 디바이스 간의 양방향 통신을 가능하게 하는 AWS IoT를 통한 논리적 경로 CAT(클라이언트 액세스 토큰) : 새 터널이 생성될 때 보안 터널링에 의해 생성된 토큰 페어. CAT는 소스 및 대상 디바이스에서 보안 터널링 서비스에 연결하는 데 사용. IoT device agent : AWS IoT 디바이스 게이트웨이에 연결하고 MQTT를 통해 새 터널 알림을 수신하는 IoT 애플리케이션. Local proxy : 소스 및 대상 디바이스에서 실행되고 보안 터널링 서비스와 디바이스 애플리케이션 간에 데이터 스트림을 릴레이하는 소프트웨어 프록시입니다. 로컬 프록시는 소스 모드 또는 대상 모드에서 실행할 수 있습니다.   © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab4/module1/",
	"title": "자원 삭제",
	"tags": [],
	"description": "",
	"content": "CloudFormation 스택 삭제   CloudFormation 콘솔로 이동합니다.\n  다음 스택을 삭제합니다.\n SmartFactoryworkshop aws-cloud9-SFworkshop-GGC-xxxxx    약 5분 뒤 정상적으로 삭제가 완료되었는지 확인합니다.\n  IoT 자원 삭제  AWS IoT 콘솔로 이동 합니다.\n  다음 자원들을 삭제합니다.\n 사물 : SFworkshop_thing 터널 : 워크샵에서 사용했던 터널들 보안 : 인증서 / 정책    key pair 삭제  EC2 키페어 콘솔로 이동 합니다.\n  다음 자원을 삭제합니다.\n SFworkshop-keypair    자원들의 다른 사용처가 있다면 삭제하면 안됩니다. 특히 키페어는 삭제 후 복구할 수 없습니다.\n\r © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab2/module2/",
	"title": "IoT device 기본 구성 (디바이스)",
	"tags": [],
	"description": "",
	"content": " 해당 모듈에서는 앞서 AWS IoT에 등록했던 사물 디바이스에 대한 인스턴스 구성을 합니다. 관련 SDK를 설치하고 sample 스크립트를 이용해서 정상적으로 데이터가 구독되는지까지 확인합니다.    Cloud9 콘솔의 SFworkshop-GGC 환경으로 이동합니다.\n  프롬프트를 통해 해당 터미널이 GGC(cloud9, IAM User가 나타남) 인스턴스인지 GGAD(EC2 instance, ubuntu가 나타남)인스턴스인지 확인하고, 필요시 GGC 인스턴스로 이동합니다.\n  상단의 File \u0026gt; Upload Local Files… 메뉴를 이용하여, 다운로드 받은 connect_device_package.zip 파일을 Cloud9 IDE에 업로드합니다.   프롬프트를 통해 해당 터미널이 GGC(cloud9, IAM User가 나타남) 인스턴스인지 GGAD(EC2 instance, ubuntu가 나타남)인스턴스인지 확인하고, 필요시 GGC 인스턴스로 이동합니다.\n  다음 명령어를 통해 다운받은 연결 키트를 GGAD 인스턴스로 복사합니다.\n  scp -i ~/environment/SFworkshop-keypair.pem ~/environment/connect_device_package.zip ubuntu@$GGAD_IP:~/\r복사가 완료되면 GGAD인스턴스로 접속하고, 다운 받은 파일의 압축을 해제합니다.  # GGAD로 로그인\rssh -i ~/environment/SFworkshop-keypair.pem ubuntu@$GGAD_IP\r# 다운받은 파일 확인\rls\r# 파일 압축 해제 unzip connect_device_package.zip \r연결키트에는 해당 사물 디바이스에 대한 인증서와 퍼블릭키,프라이빗 키 그리고 Python을 위한 AWS Device SDK를 다운로드 및 설치하고 간단한 구독 테스트를 하기 위한 시작 스크립트(start.sh)가 포함되어있습니다.\n\r압축이 해제된 파일들 중 start.sh 에 실행권한을 추가하고, 시작 스크립트를 실행합니다.  # 실행 권한 추가\rchmod +x start.sh\r# 스크립트 실행 ./start.sh\r 다음과 같은 화면이 나오면서 메시지가 publish 되면 정상입니다.   publish된 메시지가 정상적으로 구독이 되는지 확인하기 위해 IoT 콘솔의 테스트 메뉴로 이동합니다.\n  구독 주제로 start.sh에 미리 설정되어있던 sdk/test/Python 을 입력한 뒤 주제 구독을 클릭합니다.   다음과 같이 테스트 메시지가 구독되고 있다면 정상입니다.   GGAD 인스턴스에서 스크립트의 실행을 멈추셨다면 더이상 구독 메시지가 보이지 않습니다. 메시지가 보이지 않는다면 스크립트가 실행되고 있는지 확인해주시기 바랍니다.\n\r다시 cloud9 의 GGAD 터미널로 돌아와 ls 명령어를 실행하면 aws-iot-device-sdk-python과 root-CA.crt 파일이 생성된 것을 확인할 수 있습니다. 해당 파일들은 start.sh 파일의 실행결과로 생성이 되었습니다.    이제 디바이스의 기본 구성이 완료 되었습니다.   © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab3/module2/",
	"title": "IoT 보안 터널링 구성(수동)",
	"tags": [],
	"description": "",
	"content": "소스와 대상 디바이스에서 로컬 프록시 설치하기   소스 디바이스 (admin 인스턴스)와 대상 디바이스 (GGAD 인스턴스)에 로컬 프록시를 설치하기 위해서는 다양한 dependency 소프트웨어를 설치해야하고, 그에 따른 시간이 오래 걸립니다. 따라서 워크샵 펀의상 이 부분은 이미 구성이 되어있는 AMI로 대체되었습니다.\n 세부적인 과정이 궁금한 사용자들을 위해 AMI를 구성했던 부트스트랩 스크립트를 참고해주시기 바랍니다. \r\r부트스트랩 스크립트보기\r\r\r#!/bin/bash\rsudo apt-get update\r# 파이썬 설치 sudo apt-get -y install python3-pip\rsudo python3 -m pip install AWSIoTPythonSDK\rsudo update-alternatives --install /usr/bin/python python /usr/bin/python3 3\rsudo update-alternatives --config python\r# 폴더 생성\rmkdir ~/dependencies\rcd ~/dependencies\r# local proxy 설치를 위한 dependency 설치 sudo apt-get -y install build-essential\rsudo apt-get -y install cmake\rsudo apt-get -y install zlibc\rsudo apt-get -y install libssl-dev\rsudo apt-get -y install unzip\r## Boost dependency 파일 설치 wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz -O /tmp/boost.tar.gz\rsudo tar xzvf /tmp/boost.tar.gz\rcd boost_1_69_0\r./bootstrap.sh\rsudo ./b2 install\r## Protobuf dependency 파일 설치 cd ~/dependencies\rwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gz -O /tmp/protobuf-all-3.6.1.tar.gz\rsudo tar xzvf /tmp/protobuf-all-3.6.1.tar.gz\rcd protobuf-3.6.1\rsudo mkdir build\rcd build\rsudo cmake ../cmake\rsudo make\rsudo make install\r## Catch2 test framework 설치 cd ~/dependencies\rsudo git clone https://github.com/catchorg/Catch2.git\rcd Catch2\rsudo mkdir build\rcd build\rsudo cmake ../\rsudo make\rsudo make install\r# local proxy 설치\rcd ~/dependencies\rgit clone https://github.com/aws-samples/aws-iot-securetunneling-localproxy\rcd aws-iot-securetunneling-localproxy\rmkdir build\rcd build\rcmake ../\rmake\r\r\r    대상 디바이스 (GGAD 인스턴스) 에서 로컬 프록시 설정을 확인하겠습니다. Cloud9의 GGAD 터미널로 이동합니다.\n  GGAD 인스턴스의 터미널이 맞는지 다시한번 확인합니다.\n\r명령어를 실행했을 때 다음과 같이 나타나면 정상입니다.  cd ~/dependencies\rls\rAWS 콘솔에서 보안 터널 열기  AWS IoT 콘솔에서 관리 \u0026gt; 터널로 이동합니다.   디바이스에 대한 보안 터널 열기에서 터널 열기를 클릭합니다.   새 터널 열기에서 간단한 설명을 입력합니다. (예 : secure tunneling for SFworkshop)   대상 구성 창을 활성화하고 ThingName 에서 이전 모듈에서 생성했던 SFworkshop_thing을 선택합니다. 서비스 이름을 ssh 라고 입력합니다.   그 외 나머지 설정은 기본값을 그대로 두고 터널 열기를 클릭하여 다음 단계로 진행합니다.   보안 터널의 제한 시간은 12시간이 기본값이며, 1분에서 12시간까지 사용자 정의하여 구성할 수 있습니다.\n\r소스 및 대상의 클라이언트 엑세스 토큰을 다운로드하고, 다운로드가 완료된 것을 확인하면 완료를 클릭하여 구성을 완료합니다.   엑세스 토큰은 추후 사용하므로 잘 보관합니다.\n\r다음과 같이 활성화된 터널이 열려 있는 것을 확인할 수 있습니다.   AWS IoT 보안 터널링 테스트 소스 인스턴스 (admin 인스턴스)에 접속을 해야합니다. 좋아하는 터미널을 이용해 인스턴스에 접속합니다. admin 인스턴스의 IP는 Cloudformation 의 출력탭에서 확인할 수 있습니다.     admin 인스턴스의 IP는 Cloudformation 의 출력탭에서 확인할 수 있습니다.   예를들어, 하기 명령어와 사진의 작업은 MAC OS 의 기본 터미널에서 수행했습니다.\n  #키페어 권한 부여 chmod 400 ~/Downloads/SFworkshop-keypair.pem # admin인스턴스에서 GGAD인스턴스 접속을 위한 키페어 복사 scp -i ~/Downloads/SFworkshop-keypair.pem ~/Downloads/SFworkshop-keypair.pem ubuntu@\u0026lt;admin인스턴스의 퍼블릭IP\u0026gt;:~/\r#로컬PC에서 admin인스턴스로 엑세스토큰 복사 scp -i ~/Downloads/SFworkshop-keypair.pem ~/Downloads/xxxxxxxx-sourceAccessToken.txt ubuntu@\u0026lt;adminInstanceId\u0026gt;:~/\r# admin 인스턴스에 접속\rssh -i ~/Downloads/SFworkshop-keypair.pem ubuntu@\u0026lt;admin인스턴스의 퍼블릭IP\u0026gt;\r# 파일 확인\rls\r\r키페어 파일이나 토큰을 저장한 위치가 다르다면 명령어를 수정하여 수행하여야 합니다.\n\r위의 9 번 단계에서 다운로드 받은 source와 destination 용 토큰을 각각의 device에 복사해야합니다. 우선 대상 인스턴스 (GGAD 인스턴스) 에 destionation 토큰 (예 : xxxxxxx-destinationAccessToken.txt) 을 복사합니다.    cloud9에서 상단의 File \u0026gt; Upload Local Files… 메뉴를 이용하여, 다운로드 받은 xxxxxxx-destinationAccessToken.txt 파일을 Cloud9 IDE에 업로드합니다.   프롬프트를 통해 해당 터미널이 GGC(cloud9, IAM User가 나타남) 인스턴스인지 GGAD(EC2 instance, ubuntu가 나타남)인스턴스인지 확인하고, 필요시 GGC 인스턴스로 이동합니다.\n  exit\r 다음 명령어를 통해 다운받은 엑세스 토큰을 GGAD 인스턴스로 복사합니다.  #Cloud9에서 GGAD로 엑세스토큰 복사 scp -i ~/environment/SFworkshop-keypair.pem ~/environment/xxxxxxx-destinationAccessToken.txt ubuntu@$GGAD_IP:~/\r# GGAD로 로그인\rssh -i ~/environment/SFworkshop-keypair.pem ubuntu@$GGAD_IP\rTarget device (GGAD 인스턴스)에서 앞서 다운로드 받은 token을 사용하여 local proxy를 실행합니다. 하기와 같이 connection이 성공적으로 맺어집니다.  # 엑세스 토큰값 확인 (복사해놓을것)\rcat ~/xxxxxxx-destinationAccessToken.txt\r# local 프록시로 경로 이동\rcd ~/dependencies/aws-iot-securetunneling-localproxy/build/bin\r# local 프록시 실행\r./localproxy -r us-east-1 -d localhost:22 -t \u0026lt;destination_client_access_token\u0026gt; 이번에는 Source device (admin인스턴스) 에서 앞서 다운로드 받은 token을 사용하여 local proxy를 실행해 보겠습니다. 마찬가지로 하기와 같이 connection이 성공적으로 맺어집니다.  # 엑세스 토큰값 확인 (복사해놓을 것)\rcat ~/xxxxxxx-sourceAccessToken.txt\r# local 프록시로 경로 이동\rcd ~/dependencies/aws-iot-securetunneling-localproxy/build/bin\r# local 프록시 실행\r./localproxy -r us-east-1 -s 5000 -t \u0026lt;source_client_access_token\u0026gt; Source device (admin인스턴스) 의 터미널을 하나 더 띄워서 local proxy를 실행할 때 지정한 Port (5000) 로 ssh 연결을 시도합니다.  ssh -i ~/SFworkshop-keypair.pem ubuntu@localhost -p 5000\r  다음과같이 접속에 성공합니다.   소스 디바이스(admin인스턴스) 측 로그   대상 디바이스(GGAD인스턴스) 측 로그   Troubleshooting 혹은 admin 작업 후 tunnel을 삭제합니다.   © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab3/module3/",
	"title": "IoT 보안 터널링 구성(자동)",
	"tags": [],
	"description": "",
	"content": "AWS IoT 보안 터널링 - 자동 구성 모듈 3에서 진행했던 보안 터널 구성은 직관적이기는 하지만 매번 토큰을 각각의 디바이스에 업로드 해주어야한다는 불편함이 있습니다. 이번 모듈 4에서는 AWS CLI open-tunnel 명령어를 이용하면 remote device에 token을 미리 복사해 주지 않아도 되고, Remote device에 미리 local proxy를 설치만 미리 해놓고 ‘실행해 놓지 않아도’ 되는 자동 구성 방법에 대해서 알아봅니다.\n소스와 대상 디바이스에서 로컬 프록시 설치하기   소스 디바이스 (admin 인스턴스)와 대상 디바이스 (GGAD 인스턴스)에 로컬 프록시를 설치하기 위해서는 다양한 dependency 소프트웨어를 설치해야하고, 그에 따른 시간이 오래 걸립니다. 따라서 워크샵 펀의상 이 부분은 이미 구성이 되어있는 AMI로 대체되었습니다.\n 세부적인 과정이 궁금한 사용자들을 위해 AMI를 구성했던 부트스트랩 스크립트를 참고해주시기 바랍니다. \r\r부트스트랩 스크립트보기\r\r\r#!/bin/bash\rsudo apt-get update\r# 파이썬 설치 sudo apt-get -y install python3-pip\rsudo python3 -m pip install AWSIoTPythonSDK\rsudo update-alternatives --install /usr/bin/python python /usr/bin/python3 3\rsudo update-alternatives --config python\r# 폴더 생성\rmkdir ~/dependencies\rcd ~/dependencies\r# local proxy 설치를 위한 dependency 설치 sudo apt-get -y install build-essential\rsudo apt-get -y install cmake\rsudo apt-get -y install zlibc\rsudo apt-get -y install libssl-dev\rsudo apt-get -y install unzip\r## Boost dependency 파일 설치 wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz -O /tmp/boost.tar.gz\rsudo tar xzvf /tmp/boost.tar.gz\rcd boost_1_69_0\r./bootstrap.sh\rsudo ./b2 install\r## Protobuf dependency 파일 설치 cd ~/dependencies\rwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gz -O /tmp/protobuf-all-3.6.1.tar.gz\rsudo tar xzvf /tmp/protobuf-all-3.6.1.tar.gz\rcd protobuf-3.6.1\rsudo mkdir build\rcd build\rsudo cmake ../cmake\rsudo make\rsudo make install\r## Catch2 test framework 설치 cd ~/dependencies\rsudo git clone https://github.com/catchorg/Catch2.git\rcd Catch2\rsudo mkdir build\rcd build\rsudo cmake ../\rsudo make\rsudo make install\r# local proxy 설치\rcd ~/dependencies\rgit clone https://github.com/aws-samples/aws-iot-securetunneling-localproxy\rcd aws-iot-securetunneling-localproxy\rmkdir build\rcd build\rcmake ../\rmake\r\r\r    AWS IoT 보안 터널링 테스트 대상 디바이스 (GGAD 인스턴스) 에서 로컬 프록시 설정을 확인하겠습니다. Cloud9의 GGAD 터미널로 이동합니다.  GGAD 인스턴스의 터미널이 맞는지 다시한번 확인합니다.\n\r명령어를 실행했을 때 다음과 같이 나타나면 정상입니다.  cd ~/dependencies\rls\r다음 명령어를 실행하여 local 프록시의 자동 실행을 위한 스크립트를 다운로드하고, proxy-demo.py 파일을 홈 디렉터리로 복사해옵니다.  cd ~\rgit clone https://github.com/yijeong/smartfactoryiot.git\rcp ~/smartfactoryiot/device/proxy-demo.py ~ 파일 편집을 위해 편집기를 실행합니다.  vi ~/proxy-demo.py\r 수정해야 할 곳은 # Parameter 의 iot_endpoint 부분으로, 다음과 같이 값을 수정합니다.\n  AWS IoT 콘솔의 사물 메뉴로 이동하여 **SFworkshop_thing\u0026quot;을 선택합니다.   사물의 메뉴 중 상호 작용을 클릭하면 다음과 같이 REST API 엔드포인트가 기술되어있습니다. 이 값을 iot_endpoint에 넣어줍니다.   proxy-demo.py는 대략 다음과 같은 모습이 됩니다.     이제 스크립트를 실행합니다. 그림과 같이 에러가 나지 않고 대기 상태에 들어가면 정상입니다. 이 스크립트는 예약된 topic($aws/things//tunnels/notify)의 메시지를 수신하면 destination용 token을 수신하고 local proxy를 실행하는 역할을 합니다.\n  python ~/proxy-demo.py\r AWS CLI open-tunnel 명령을 실행하기 위해, 하나의 터미널을 더 열어줍니다.   cloud9 인스턴스는 이미 aws cli 및 관련 권한을 갖추고 있습니다. open-tunnel 명령어를 통해 새로운 터널을 열겠습니다. 이 명령어를 통해 신규 ssh tunnel이 생성되고 token도 target device에 배포가 됩니다. ($aws/things//tunnels/notify 토픽으로 메시지가 전송)\n  aws iotsecuretunneling open-tunnel --destination-config --region us-east-1 thingName=SFworkshop_thing,services=ssh\r추후 사용하기 위해 결과값 중 sourceAccessToken의 값을 복사해둡니다.\n\r 다시 GGAD 인스턴스 터미널로 돌아가보면 다음과 같이 새로운 tunnel에 대한 공지를 받고 연결을 수립하는 것을 볼 수 있습니다.   이제 소스 디바이스 (admin 인스턴스) 에서 로컬 프록시를 실행해보겠습니다. 사용하시는 편한 터미널 도구를 이용해서 (예: putty) admin 인스턴스에 접속합니다.\n  admin 인스턴스의 IP는 Cloudformation 의 출력탭에서 확인할 수 있습니다.   사진의 예는 MAC OS 의 기본 터미널입니다.\n  chmod 400 ~/Downloads/SFworkshop-keypair.pem ssh -i ~/Downloads/SFworkshop-keypair.pem ubuntu@\u0026lt;admin인스턴스의 퍼블릭IP\u0026gt;\r  admin 인스턴스 내에서 다음과 같이 명령어를 실행해 로컬 프록시를 시작합니다. sourceAccessToken값은 앞서 16번에서 복사해둔 값을 사용합니다. 정상적으로 실행이 되면 그림과 같이 연결 대기 상태가 됩니다.\n  # 로컬 프록시 경로로 이동 cd ~/dependencies/aws-iot-securetunneling-localproxy/build/bin/\r# 로컬 프록시 시작\r./localproxy -r us-east-1 -s 5000 -t \u0026lt;sourceAccessToken값\u0026gt;\r이제 하나의 터미널창을 더 띄우고, 로컬 PC에 저장되어있는 keypair파일 (SFworkshop-keypair.pem)을 admin 인스턴스의 홈디렉터리에 복사해옵니다. 명령어의 예시는 MAC OS 기반입니다.  # 로컬 PC에서 실행\rscp -i ~/Downloads/SFworkshop-keypair.pem ~/Downloads/SFworkshop-keypair.pem ubuntu@3.95.133.202:~\radmin 인스턴스에 접속하여 키파일이 잘 복사되었는지 확인합니다.  # 로컬 PC에서 실행\rssh -i ~/Downloads/SFworkshop-keypair.pem ubuntu@3.95.133.202 # admin 인스턴스에서 확인 ls\r복사해온 키와 로컬 프록시를 이용해서 GGAD 용 인스턴스에 접속해봅니다.  ssh -i ~/SFworkshop-keypair.pem ubuntu@localhost -p 5000\r수고하셨습니다. 보안 터널링 구성을 모두 완료하였습니다.\n © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab3/module4/",
	"title": "내용 정리",
	"tags": [],
	"description": "",
	"content": "정리해보겠습니다  소스와 대상 디바이스에 로컬 프록시를 설치가 되어있습니다. 대상 디바이스 (GGAD인스턴스)에서는 AWS에서 예약된 topic($aws/things/[사물이름]/tunnels/notify)의 메시지를 구독(subscribe)하는 스크립트가 실행중입니다. (proxy-demo.py) 여기에 aws cli 권한이 있는 사용자가 open-tunnel 명령어(aws iotsecuretunneling open-tunnel --destination-config --region us-east-1 thingName=SFworkshop_thing,services=ssh)로 새로운 보안 터널과 두개의 토큰을 생성합니다. proxy-demo.py는 메시지가 수신되면 destination 용 토큰을 받아 로컬 프록시를 실행합니다. 로컬 프록시를 실행하는 명령어는 다음과 같습니다. ./localproxy -r us-east-1 -d localhost:22 -t \u0026lt;destination_client_access_token\u0026gt; 소스 디바이스 (admin 인스턴스)에서도 ./localproxy -r us-east-1 -s 5000 -t \u0026lt;source_client_access_token\u0026gt; 와 같이 로컬 프록시를 가동합니다. 다시 소스 디바이스로 ssh -i kp-smart-factory.pem ubuntu@localhost -p 5000 로 접속을 시도하면, 소스 디바이스의 5000포트가 대상 디바이스의 22번 포트로 포워딩 되어 보안 연결이 정상적으로 접속됩니다.  수고하셨습니다. 모듈 3 을 모두 완료하셨습니다.\n © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/",
	"title": "홈",
	"tags": [],
	"description": "",
	"content": "AWS IoT Secure Tunneling 구성  AWS IoT Secure Tunneling (보안 터널링)을 구성해봅니다.\n © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab1/",
	"title": "환경 구성",
	"tags": [],
	"description": "",
	"content": "환경 구성  모듈 1에서는 본격적인 워크샵에 들어가기 전에 AWS CloudFormation 을 이용해서 필요한 자원을 deploy 합니다.  "
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab1/module1/",
	"title": "환경 구성",
	"tags": [],
	"description": "",
	"content": "사전 준비 사항  AWS 계정 및 IAM User : IAM, AWS IoT, Amazon EC2 에 대한 권한이 있는 IAM User를 사용해야 합니다. 브라우저: 최신 버전의 크롬, 파이어폭스  리전 선택  AWS 리전: 이번 실습은 버지니아 북부 (us-east-1) 리전에서 실행합니다.  리소스 생성 EC2 키페어 생성 (이미 생성된 경우 이 단계 생략 가능)   EC2 키페어는 EC2인스턴스 생성을 위해 필요한 항목이므로, CloudFormation 템플릿을 실행하기에 앞서 EC2 키페어를 생성합니다.\n  이미 EC2 키페어가 생성된 경우라면, 이 단계를 생략합니다. EC2 키페어가 없다면 EC2 콘솔로 접속하여 키페어를 생성합니다.\n  EC2 콘솔 화면의 좌측 메뉴에서 “키 페어”를 클릭하고 “키 페어 생성” 버튼을 클릭합니다.\n  “키 페어 이름”에 “SFworkshop-keypair”를 입력한 후, “생성”을 클릭합니다.\n  생성이 완료되면 “SFworkshop-keypair.pem” 파일이 임의의 폴더에 자동으로 다운로드됩니다.\n  다운받은 프라이빗 키는 분실하면 다시 복구할 수 없습니다. 워크샵동안 잘 관리해주시기 바랍니다.\n\rcloudformation 으로 초기 환경 구성 직관적인 IoT 환경을 구현하기 위해서는 raspberry pi 혹은 intel miniPC와 같은 장비로 진행을 하는 것이 가장 좋지만, 해당 자원을 확보하지 않은 사용자를 위해 EC2로 device를 시뮬레이션 합니다. 워크샵 환경을 구성하기 위해 CloudFormation을 실행합니다. CloudFormation을 통해 다음과 같은 AWS 리소스가 생성됩니다.\n   AWS 서비스 유형 리소스명 기타     VPC SFworkshop-VPC 10.0.0.0/16   VPC Subnet SFworkshop-public-Sub 10.0.0.0/24   VPC Subnet SFworkshop-private-Sub 10.10.2.0/24   Cloud9 SFworkshop-GGC 개발환경, c5.large   EC2 SFworkshop-thing-instance GGAD용 인스턴스, t3.large   EC2 SFworkshop-admin-instance admin용 인스턴스, t2.micro   기타 서비스 Elastic IP, Route table, Security Groups, NAT Gateway, IAM Role 등       AWS 관리 콘솔로 접속해서, 아래의 화면과 같이 AWS 버지니아 북부 리전이 선택되었는지 확인합니다.\r\rOpen AWS Console\r\r본 실습 의 모든 과정은 버지니아 북부(N.Virginia) 리전에서 이루어지므로, 원활한 실습 진행을 위해서 반드시 올바른 리전이 선택되었는지를 확인하시기 바랍니다.   CloudFormation 템플릿을 실행하기 위해 링크를 클릭합니다. 링크를 클릭하면 아래와 같은 화면이 표시됩니다. 파라미터는 수정하지 않으셔도 됩니다.\n  정상적으로 진행이 되는 경우 아래와 같이 2개의 스택의 상태가 \u0026ldquo;CREATE_COMPLETE)으로 되어 있는 것을 확인하실 수 있습니다.   해당 템플릿은 별도의 VPC 와 EIP 등을 추가로 생성하므로 기존에 사용하던 계정에 VPC 나 EIP 의 수가 한계에 도달한 경우 스택 생성이 실패할 수 있습니다. 그런 경우에는 추가 자원을 확보한 뒤에 다시 스택 생성을 해주시기 바랍니다.\n\rGGAD 용 EC2 인스턴스 접속확인 SmartFactoryworkshop 스택의 출력 탭에서 Cloud9의 값을 확인하고 클릭하여 접속합니다.   이 워크샵에서 cloud9 인스턴스는 private subnet에 있는 GGAD용 EC2에 접근하기 위한 bastion host 역할을 맡게 됩니다. 통일성을 위해 앞으로 이 cloud9 인스턴스는 GGC(Greengrass Core)라고 부르도록 하겠습니다.\n\r cloud9에서 GGAD(EC2 instance)인스턴스로 접근할 수 있도록 keypair를 가져와야합니다. 상단의 File \u0026gt; Upload Local Files… 메뉴를 이용하여, 처음에 다운 받은 SFworkshop-keypair.pem 파일을 Cloud9 IDE에 업로드합니다.   import한 키 파일의 권한을 변경합니다.\n  chmod 400 ~/environment/SFworkshop-keypair.pem\r원활한 워크샵 진행을 위해 cloudformation 으로 생성한 EC2 인스턴스의 private IP를 찾아 환경 변수로 설정합니다.   export GGAD_IP=\u0026lt;사설IP\u0026gt;\r\r이 워크샵에서 EC2 인스턴스는 Greengrass Awared Device 역할을 맡게 됩니다. 통일성을 위해 앞으로 이 cloud9 인스턴스는 GGAD(Greengrass Awared Device)라고 부르도록 하겠습니다.\n\r정상적으로 접속이 되는지 확인합니다. Are you sure you want to continue connecting (yes/no) 문구가 나오면 yes라고 입력하여 응답합니다.  ssh -i ~/environment/SFworkshop-keypair.pem ubuntu@$GGAD_IP\r정상적으로 로그인이 되는 것이 확인되면 다시 GGAD 인스턴스틑 빠져나옵니다.  exit\r  위와 같은 작업을 통해 아래와 환경이 준비됩니다.    © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab2/",
	"title": "IoT Device 구성",
	"tags": [],
	"description": "",
	"content": "IoT Device 구성  모듈 2에서는 모듈 1에서 만든 GGAD 인스턴스가 AWS IoT 서비스에서 thing 디바이스로써 동작할 수 있도록 AWS console 작업과 인스턴스 내 설정을 진행합니다.  "
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab3/",
	"title": "IoT 보안 터널링 구성",
	"tags": [],
	"description": "",
	"content": "IoT Secure Tunneling 구성  모듈 3에서는 보안 터널링을 구성해봅니다. 보안 터널링은 원격 사이트의 제한된 방화벽 뒤에 디바이스를 배포하는 경우 문제 해결, 구성 업데이트 및 기타 운영 작업을 위해 해당 디바이스에 양방향 통신을 수립할 수 있는 기능입니다. 보안 터널링은 기존 인바운드 방화벽 규칙을 업데이트할 필요가 없으므로 원격 사이트의 방화벽 규칙에서 제공하는 보안 수준을 동일하게 유지할 수 있습니다. 보안 터널링을 생상하는 방법은 수동 및 자동 구성이 있으며, 차례대로 실습 해봅니다.  "
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/lab4/",
	"title": "자원 삭제",
	"tags": [],
	"description": "",
	"content": "자원 삭제  AWS의 자원들은 대부분 pay-as-you-go 정책을 가지고 있습니다. 따라서 사용하지 않는 자원을 방치하면 불필요한 비용이 발생할 수 있습니다. 워크샵을 마무리 지으며, 사용했던 자원을 삭제합니다.   © 2020 Amazon Web Services, Inc. 또는 자회사, All rights reserved.\n"
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://master.d2r6v7ins5jzsk.amplifyapp.com/credits/",
	"title": "크레딧",
	"tags": [],
	"description": "",
	"content": "Author Amazon Web Services Solutions Architect 조이정 yijeong@amazon.com\n참고 자료 Git Repository "
}]